import logging
from typing import Union, Optional, List, Any, Dict

class Subject:
    def __init__(self) -> None: ...
    def set_platform(self, value: Any): ...
    def set_user_id(self, user_id: Any): ...
    def set_screen_resolution(self, width: Any, height: Any): ...
    def set_viewport(self, width: Any, height: Any): ...
    def set_color_depth(self, depth: Any): ...
    def set_timezone(self, timezone: Any): ...
    def set_lang(self, lang: Any): ...
    def set_domain_user_id(self, duid: Any): ...
    def set_ip_address(self, ip: Any): ...
    def set_useragent(self, ua: Any): ...
    def set_network_user_id(self, nuid: Any): ...


logger: logging.Logger


class Emitter:
    def __init__(self, endpoint: str, protocol: str = ..., port: Optional[int] = ..., method: str = ..., buffer_size: Optional[int] = ..., on_success: Optional[Any] = ..., on_failure: Optional[Any] = ..., byte_limit: Optional[int] = ...) -> None: ...


class Tracker:
    emitters: Union[List[Any], Any] = ...
    subject: Optional[Subject] = ...
    namespace: Optional[str] = ...
    app_id: Optional[str] = ...
    encode_base64: bool = ...

    def __init__(self, emitters: Union[List[Any], Any], subject: Optional[Subject] = ..., namespace: Optional[str] = ..., app_id: Optional[str] = ..., encode_base64: bool = ...) -> None: ...
    # @staticmethod
    # def get_uuid(): ...
    # @staticmethod
    # def get_timestamp(tstamp: Optional[Any] = ...): ...
    # def track(self, pb: Any): ...
    # def complete_payload(self, pb: Any, context: Any, tstamp: Any): ...
    # def track_struct_event(self, category: Any, action: Any, label: Optional[Any] = ..., property_: Optional[Any] = ..., value: Optional[Any] = ..., context: Optional[Any] = ..., tstamp: Optional[Any] = ...): ...
    # def track_unstruct_event(self, event_json: Any, context: Optional[Any] = ..., tstamp: Optional[Any] = ...): ...
    # track_self_describing_event: Any = ...
    # def flush(self, asynchronous: bool = ...): ...
    # def set_subject(self, subject: Any): ...
    # def add_emitter(self, emitter: Any): ...


class SelfDescribingJson:
    schema: Any = ...
    data: Any = ...
    def __init__(self, schema: Any, data: Any) -> None: ...
    def to_json(self) -> Dict[str, Any]: ...
    def to_string(self) -> str: ...
